class Solution:
    def minOperations(self, nums: List[int], k: int) -> int:
        # Approach from solutions
        txor=0
        for i in nums:
            txor^=i
        ans=0
        while txor>0 or k>0:
            if txor%2!=k%2:
                ans+=1
            txor//=2
            k//=2
        return ans

        # Approach I came up with got 100 but in big
        def aftexXor(noOfZeros,noOfOnes):
            if noOfZeros>0 and noOfOnes>0:
                leftOverValueAfterXoringOne=0
                if noOfOnes%2==1:
                    leftOverValueAfterXoringOne=1
                return leftOverValueAfterXoringOne^0
            elif noOfOnes>0:
                leftOverValueAfterXoringOne=0
                if noOfOnes%2==1:
                    leftOverValueAfterXoringOne=1
                return leftOverValueAfterXoringOne
            elif noOfZeros>0:
                return 0
            else:
                return 0
        zero={}
        one={}
        for val in nums:
            i=0
            temp=val
            while temp>0:
                par=temp%2
                if i not in zero:
                    zero[i]=0
                    one[i]=0
                if par==0:
                    zero[i]+=1
                else:
                    one[i]+=1
                i+=1
                temp//=2
        ans=0
        i=0
        while k>0:
            pa=k%2
            if i not in zero:
                    zero[i]=0
                    one[i]=0
            if pa!=aftexXor(zero[i],one[i]):
                ans+=1
            i+=1
            k//=2
        for j in one:
            if j>=i:
                if 0!=aftexXor(zero[j],one[j]):
                    print(j,zero[j],one[j])
                    ans+=1
        return ans

        

            

        
